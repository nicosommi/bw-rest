// Generated by CoffeeScript 1.6.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.app = typeof window !== "undefined" && window !== null ? window : {};

  jQuery(function() {
    var AdminView, AppView, UserItemView, UserView, UsersView, _ref, _ref1, _ref2, _ref3, _ref4;
    AppView = (function(_super) {
      __extends(AppView, _super);

      function AppView() {
        _ref = AppView.__super__.constructor.apply(this, arguments);
        return _ref;
      }

      AppView.prototype.el = $('#appView');

      AppView.prototype.initialize = function() {
        return _.bindAll(this, 'render');
      };

      AppView.prototype.render = function(subview) {
        console.log("AppView.render");
        subview.render();
        return this;
      };

      AppView.prototype.change = function(content) {
        this.$el.empty();
        this.$el.append(content);
        return app.Util.initializeControls();
      };

      return AppView;

    })(Backbone.View);
    app.AppView = AppView;
    UserView = (function(_super) {
      __extends(UserView, _super);

      function UserView() {
        _ref1 = UserView.__super__.constructor.apply(this, arguments);
        return _ref1;
      }

      UserView.prototype.tagName = 'div';

      UserView.prototype.id = 'userView';

      UserView.prototype.template = _.template($('#userTemplate').html());

      UserView.prototype.events = function() {
        return {
          'keyup #inputFirstName': 'mapFields',
          'keyup #inputLastName': 'mapFields'
        };
      };

      UserView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'show', 'hide', 'add', 'render', 'initializeControls', 'mapFields', 'setUser', 'renderChange');
        return this.listenTo(this.model, 'change', this.renderChange);
      };

      UserView.prototype.mapFields = function(e) {
        console.log("mapFields");
        this.model.set('firstName', $('#inputFirstName').val());
        return this.model.set('lastName', $('#inputLastName').val());
      };

      UserView.prototype.show = function() {
        console.log('UserView.show');
        this.$el.dialog('open');
        return this.delegateEvents();
      };

      UserView.prototype.hide = function() {
        console.log('UserView.hide');
        return this.$el.dialog('close');
      };

      UserView.prototype.add = function() {
        console.log('UserView.add');
        this.collection.addUser(this.model);
        this.setUser(new app.User());
        return this.hide();
      };

      UserView.prototype.setUser = function(model) {
        console.log('UserView.setUser');
        this.model = model;
        $('#inputFirstName').val(this.model.get('firstName'));
        return $('#inputLastName').val(this.model.get('lastName'));
      };

      UserView.prototype.renderChange = function() {
        console.log('UserView.renderChange');
        this.render();
        return this.initializeControls();
      };

      UserView.prototype.render = function() {
        console.log('UserView.render');
        this.$el.html(this.template({}));
        return this;
      };

      UserView.prototype.initializeControls = function() {
        var obj;
        console.log('UserView.initializeControls');
        obj = this;
        return this.$('#btnAddUser').click(function(event) {
          obj.mapFields();
          return app.AppRouter.usersView.addUser();
        });
      };

      return UserView;

    })(Backbone.View);
    app.UserView = UserView;
    UserItemView = (function(_super) {
      __extends(UserItemView, _super);

      function UserItemView() {
        _ref2 = UserItemView.__super__.constructor.apply(this, arguments);
        return _ref2;
      }

      UserItemView.prototype.tagName = 'li';

      UserItemView.prototype.className = 'userItem';

      UserItemView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'initializeControls');
        return this.template = _.template($('#userItemTemplate').html());
      };

      UserItemView.prototype.render = function() {
        console.log("UserItemView.render");
        this.$el.html(this.template({
          user: this.model.attributes
        }));
        return this;
      };

      UserItemView.prototype.initializeControls = function() {
        var obj;
        console.log("UserItemView.initializeControls");
        obj = this;
        this.$('#btnRemoveUser').click(function(event) {
          return app.AppRouter.usersView.removeUser(obj.model);
        });
        return this.$('#btnEditUser').click(function(event) {
          return app.AppRouter.usersView.openEditUser(obj.model);
        });
      };

      return UserItemView;

    })(Backbone.View);
    app.UserItemView = UserItemView;
    UsersView = (function(_super) {
      __extends(UsersView, _super);

      function UsersView() {
        _ref3 = UsersView.__super__.constructor.apply(this, arguments);
        return _ref3;
      }

      UsersView.prototype.id = 'usersView';

      UsersView.prototype.tagName = 'div';

      UsersView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'initializeControls', 'openAddUser', 'addUser', 'removeUser');
        this.template = _.template($('#usersTemplate').html());
        this.listenTo(this.collection, 'sync', this.render);
        this.listenTo(this.collection, 'add', this.render);
        this.listenTo(this.collection, 'remove', this.render);
        return this.addUserView = new app.UserView({
          model: new app.User(),
          collection: this.collection
        });
      };

      UsersView.prototype.openAddUser = function() {
        console.log("UsersView.openAddUser");
        this.addUserView.setUser(new app.User());
        return this.addUserView.show();
      };

      UsersView.prototype.openEditUser = function(model) {
        console.log("UsersView.openEditUser");
        this.addUserView.setUser(model);
        return this.addUserView.show();
      };

      UsersView.prototype.addUser = function() {
        console.log("UsersView.addUser");
        return this.addUserView.add();
      };

      UsersView.prototype.removeUser = function(model) {
        console.log("UsersView.removeUser: " + model.get('firstName'));
        return this.collection.removeUser(model);
      };

      UsersView.prototype.render = function() {
        var container, views;
        console.log("UsersView.render");
        this.$el.html(this.template({}));
        container = this.$('ul');
        views = [];
        this.collection.each(function(item) {
          var view;
          console.log("render user item");
          view = new app.UserItemView({
            model: item,
            collection: this.collection
          });
          views = _.union(views, [view]);
          return container.append(view.render().el);
        }, this);
        this.$el.append(this.addUserView.render().el);
        app.AppRouter.view.change(this.$el);
        this.initializeControls(views);
        return this;
      };

      UsersView.prototype.initializeControls = function(subviews) {
        var subview, _i, _len, _results;
        console.log("UsersView.initializeControls");
        this.$('#userView').dialog({
          autoOpen: false,
          modal: true,
          show: {
            effect: "blind",
            duration: 300
          },
          hide: {
            effect: "explode",
            duration: 300
          }
        });
        this.addUserView.initializeControls();
        _results = [];
        for (_i = 0, _len = subviews.length; _i < _len; _i++) {
          subview = subviews[_i];
          _results.push(subview.initializeControls());
        }
        return _results;
      };

      return UsersView;

    })(Backbone.View);
    app.UsersView = UsersView;
    AdminView = (function(_super) {
      __extends(AdminView, _super);

      function AdminView() {
        _ref4 = AdminView.__super__.constructor.apply(this, arguments);
        return _ref4;
      }

      AdminView.prototype.tagName = 'div';

      AdminView.prototype.id = 'adminView';

      AdminView.prototype.events = {
        'keyup #username': 'mapInputField',
        'keyup #password': 'mapInputField'
      };

      AdminView.prototype.initialize = function() {
        _.bindAll(this, 'render', 'hide', 'mapInputField', 'login', 'loggedIn', 'loginError');
        this.template = _.template($('#loginTemplate').html());
        this.listenTo(this.model, 'login', this.loggedIn);
        return this.listenTo(this.model, 'error', this.loginError);
      };

      AdminView.prototype.hide = function() {
        console.log("AdminView.hide");
        return this.$el.hide();
      };

      AdminView.prototype.render = function() {
        console.log("AdminView.render");
        this.$el.html(this.template({}));
        app.AppRouter.view.change(this.$el);
        return this;
      };

      AdminView.prototype.mapInputField = function() {
        console.log("mapInputFields");
        this.model.set('username', $('#username').val());
        return this.model.set('password', $('#password').val());
      };

      AdminView.prototype.login = function(e) {
        console.log('AdminView.login');
        this.mapInputField();
        this.model.login(e);
        return $('#loginErrorMessage').hide();
      };

      AdminView.prototype.loggedIn = function() {
        console.log('AdminView.loggedin');
        Backbone.history.navigate('#users', {
          trigger: true
        });
        app.Users.fetch({
          reset: true
        });
        return $('#loginErrorMessage').hide();
      };

      AdminView.prototype.loginError = function() {
        console.log('AdminView.loginError');
        return $('#loginErrorMessage').show();
      };

      return AdminView;

    })(Backbone.View);
    return app.AdminView = AdminView;
  });

}).call(this);
