// Generated by CoffeeScript 1.6.3
(function() {
  var Admin, User, _ref, _ref1,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.app = typeof window !== "undefined" && window !== null ? window : {};

  Admin = (function(_super) {
    __extends(Admin, _super);

    function Admin() {
      _ref = Admin.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Admin.prototype.defaults = function() {
      return {
        username: '',
        password: ''
      };
    };

    Admin.prototype.login = function() {
      var obj;
      console.log("Admin.login with: " + this.get('username') + '/' + this.get('password'));
      obj = this;
      return $.get("http://localhost:8989/login", {
        username: this.get('username'),
        password: this.get('password')
      }, 'json').done(function(data) {
        console.log("login success");
        return obj.trigger('login');
      }).fail(function(error) {
        console.log("login failed");
        return obj.trigger('error');
      });
    };

    return Admin;

  })(Backbone.Model);

  app.Admin = new Admin();

  User = (function(_super) {
    __extends(User, _super);

    function User() {
      _ref1 = User.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    User.prototype.defaults = function() {
      return {
        firstName: '',
        lastName: '',
        id: null
      };
    };

    User.prototype.addUser = function() {
      var obj;
      obj = this;
      return this.save({}, {
        success: function(data) {
          console.log("received: " + data);
          return obj.set('id', data.get('User').id);
        },
        error: function(error) {
          return console.log("error add user");
        }
      });
    };

    User.prototype.removeUser = function() {
      var obj;
      console.log("User.removeUser: " + this.get('id'));
      obj = this;
      return this.destroy({}, {
        success: function(data) {
          console.log("remove success");
          return obj.collection.remove(obj);
        }
      });
    };

    return User;

  })(Backbone.Model);

  app.User = User;

}).call(this);
