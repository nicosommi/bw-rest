<?xml version="1.0" encoding="UTF-8"?>
<pd:ProcessDefinition xmlns:pd="http://xmlns.tibco.com/bw/process/2003" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:regex="java://com.hp.labs.tibco.bw.regex.RegexMatch" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tib="http://www.tibco.com/bw/xslt/custom-functions" xmlns:pfx="http://www.hp.com/labs/rest/RESTTypes">
    <xsd:import namespace="http://www.hp.com/labs/rest/RESTTypes" schemaLocation="/REST/Resources/Schemas/RESTTypes.xsd"/>
    <pd:name>REST/Core/MatchRoute.process</pd:name>
    <pd:startName>Start</pd:startName>
    <pd:startType>
        <xsd:element name="root">
            <xsd:complexType>
                <xsd:sequence>
                    <xsd:element name="url" type="xsd:string"/>
                    <xsd:element name="verb" type="xsd:string"/>
                    <xsd:element name="params" type="xsd:string"/>
                    <xsd:element name="cookie" type="xsd:string" minOccurs="0"/>
                    <xsd:element ref="pfx:routes"/>
                </xsd:sequence>
            </xsd:complexType>
        </xsd:element>
    </pd:startType>
    <pd:startX>91</pd:startX>
    <pd:startY>105</pd:startY>
    <pd:returnBindings>
        <pfx:routes>
            <xsl:for-each select="$Start/root/pfx:routes/pfx:route[upper-case(tib:trim(pfx:type))!='STATIC' and upper-case(tib:trim(pfx:type))!='VIEW']">
                <xsl:if test="(current()/pfx:path='*' or regex:match($Start/root/url, current()/pfx:path))&#xA;and&#xA;(current()/pfx:verb='*' or regex:match($Start/root/verb, current()/pfx:verb))">
                    <pfx:route>
                        <pfx:path>
                            <xsl:value-of select="pfx:path"/>
                        </pfx:path>
                        <pfx:verb>
                            <xsl:value-of select="pfx:verb"/>
                        </pfx:verb>
                        <xsl:if test="pfx:type">
                            <pfx:type>
                                <xsl:value-of select="pfx:type"/>
                            </pfx:type>
                        </xsl:if>
                        <xsl:if test="pfx:folder">
                            <pfx:folder>
                                <xsl:value-of select="pfx:folder"/>
                            </pfx:folder>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="string-length(pfx:type) > 0 and upper-case(tib:trim(pfx:type)) = 'STATIC'">
                                <pfx:handler>
                                    <xsl:value-of select="'/REST/Handlers/ServeStaticResource.process'"/>
                                </pfx:handler>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx:handler>
                                    <xsl:value-of select="pfx:handler"/>
                                </pfx:handler>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:copy-of select="pfx:parameters"/>
                    </pfx:route>
                </xsl:if>
            </xsl:for-each>
            <xsl:for-each select="$Start/root/pfx:routes/pfx:route[upper-case(tib:trim(pfx:type))='VIEW']">
                <xsl:if test="upper-case($Start/root/url) = upper-case(current()/pfx:path)&#xA;and&#xA;current()/pfx:verb='GET'">
                    <pfx:route>
                        <pfx:path>
                            <xsl:value-of select="pfx:path"/>
                        </pfx:path>
                        <pfx:verb>
                            <xsl:value-of select="pfx:verb"/>
                        </pfx:verb>
                        <xsl:if test="pfx:type">
                            <pfx:type>
                                <xsl:value-of select="pfx:type"/>
                            </pfx:type>
                        </xsl:if>
                        <xsl:if test="pfx:folder">
                            <pfx:folder>
                                <xsl:value-of select="pfx:folder"/>
                            </pfx:folder>
                        </xsl:if>
                        <xsl:if test="pfx:file">
                            <pfx:file>
                                <xsl:value-of select="pfx:file"/>
                            </pfx:file>
                        </xsl:if>
                        <xsl:if test="pfx:beforeHandler">
                            <pfx:beforeHandler>
                                <xsl:value-of select="pfx:beforeHandler"/>
                            </pfx:beforeHandler>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="string-length(pfx:type) > 0 and upper-case(tib:trim(pfx:type)) = 'VIEW'">
                                <pfx:handler>
                                    <xsl:value-of select="'/REST/Handlers/ServeJADEView.process'"/>
                                </pfx:handler>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx:handler>
                                    <xsl:value-of select="pfx:handler"/>
                                </pfx:handler>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:copy-of select="pfx:parameters"/>
                    </pfx:route>
                </xsl:if>
            </xsl:for-each>
            <xsl:for-each select="$Start/root/pfx:routes/pfx:route[upper-case(tib:trim(pfx:type))='STATIC']">
                <xsl:if test="(tib:index-of($Start/root/url, current()/pfx:path) = 1)&#xA;and&#xA;(current()/pfx:verb='*' or regex:match($Start/root/verb, current()/pfx:verb))">
                    <pfx:route>
                        <pfx:path>
                            <xsl:value-of select="pfx:path"/>
                        </pfx:path>
                        <pfx:verb>
                            <xsl:value-of select="pfx:verb"/>
                        </pfx:verb>
                        <xsl:if test="pfx:type">
                            <pfx:type>
                                <xsl:value-of select="pfx:type"/>
                            </pfx:type>
                        </xsl:if>
                        <xsl:if test="pfx:folder">
                            <pfx:folder>
                                <xsl:value-of select="pfx:folder"/>
                            </pfx:folder>
                        </xsl:if>
                        <xsl:choose>
                            <xsl:when test="string-length(pfx:type) > 0 and upper-case(tib:trim(pfx:type)) = 'STATIC'">
                                <pfx:handler>
                                    <xsl:value-of select="'/REST/Handlers/ServeStaticResource.process'"/>
                                </pfx:handler>
                            </xsl:when>
                            <xsl:otherwise>
                                <pfx:handler>
                                    <xsl:value-of select="pfx:handler"/>
                                </pfx:handler>
                            </xsl:otherwise>
                        </xsl:choose>
                        <xsl:copy-of select="pfx:parameters"/>
                    </pfx:route>
                </xsl:if>
            </xsl:for-each>
        </pfx:routes>
    </pd:returnBindings>
    <pd:endName>End</pd:endName>
    <pd:endType ref="pfx:routes"/>
    <pd:endX>468</pd:endX>
    <pd:endY>100</pd:endY>
    <pd:errorSchemas/>
    <pd:processVariables>
        <Views>
            <xsd:element name="root">
                <xsd:complexType>
                    <xsd:sequence>
                        <xsd:element name="view" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
                    </xsd:sequence>
                </xsd:complexType>
            </xsd:element>
        </Views>
    </pd:processVariables>
    <pd:targetNamespace>http://xmlns.example.com/1376336806952</pd:targetNamespace>
    <pd:transition>
        <pd:from>Start</pd:from>
        <pd:to>End</pd:to>
        <pd:lineType>Default</pd:lineType>
        <pd:lineColor>-16777216</pd:lineColor>
        <pd:conditionType>always</pd:conditionType>
    </pd:transition>
</pd:ProcessDefinition>